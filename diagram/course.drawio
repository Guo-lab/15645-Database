<mxfile host="65bd71144e">
    <diagram id="AxyMZ-5-oZ095IYz01uQ" name="Page-1">
        <mxGraphModel dx="1940" dy="1138" grid="0" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="0" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0">
            <root>
                <mxCell id="0"/>
                <mxCell id="1" parent="0"/>
                <mxCell id="44" value="&lt;pre style=&quot;line-height: 50%;&quot;&gt;&lt;span style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;Concurrency &lt;/font&gt;&lt;/span&gt;&lt;/pre&gt;&lt;pre style=&quot;line-height: 50%;&quot;&gt;&lt;span style=&quot;&quot;&gt;&lt;font style=&quot;font-size: 15px;&quot;&gt;Control   &lt;/font&gt;&lt;/span&gt;&lt;/pre&gt;" style="html=1;whiteSpace=wrap;container=1;recursiveResize=0;collapsible=0;strokeColor=#CD9DE3;strokeWidth=3;fontSize=12;align=right;" vertex="1" parent="1">
                    <mxGeometry x="65" y="598" width="120" height="62" as="geometry"/>
                </mxCell>
                <mxCell id="45" value="" style="triangle;html=1;whiteSpace=wrap;strokeColor=#CD9DE3;strokeWidth=3;fontSize=12;" vertex="1" parent="44">
                    <mxGeometry x="9" y="20.09" width="20" height="30" as="geometry"/>
                </mxCell>
                <mxCell id="28" value="&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;font-size: 12px; background-color: initial;&quot;&gt;Thread-safe?&lt;/span&gt;&lt;/div&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Index-Concurrency Control&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;Hash Table Latching:&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;(1) Page Latches&amp;nbsp; (2) Slot Latches&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;B+ Tree (self-balancing) Latch Coupling:&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;lt;1&amp;gt; get latch for parent&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;lt;2&amp;gt; get latch for child&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;&quot;&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;&amp;lt;3&amp;gt; release latch for parent if safe (W| R)&lt;/span&gt;&lt;/div&gt;&lt;/font&gt;" style="shape=document;whiteSpace=wrap;html=1;boundedLbl=1;fontFamily=Times New Roman;verticalAlign=top;fillColor=#ffe6cc;strokeColor=#d79b00;spacingLeft=20;fontSize=8;size=0.06499389215564051;align=center;" parent="1" vertex="1">
                    <mxGeometry x="1074" y="655" width="240" height="141" as="geometry"/>
                </mxCell>
                <mxCell id="21" value="&lt;h1&gt;&lt;font face=&quot;Helvetica&quot;&gt;Query Engine&lt;/font&gt;&lt;/h1&gt;&lt;font face=&quot;Helvetica&quot;&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;shadow=0;fontFamily=Times New Roman;fontSize=13;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1">
                    <mxGeometry x="237" y="88" width="699" height="676" as="geometry"/>
                </mxCell>
                <mxCell id="11" value="" style="group" parent="1" vertex="1" connectable="0">
                    <mxGeometry x="236" y="910" width="477" height="149" as="geometry"/>
                </mxCell>
                <mxCell id="10" value="&lt;span style=&quot;caret-color: rgb(0, 0, 0); text-align: start;&quot; data-lucid-content=&quot;{&amp;quot;t&amp;quot;:&amp;quot;Maximize Sequential Access\nOS is the enemy&amp;quot;,&amp;quot;m&amp;quot;:[{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;left&amp;quot;},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;b&amp;quot;,&amp;quot;v&amp;quot;:true,&amp;quot;e&amp;quot;:42},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;c&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;#0e0a0aff&amp;quot;,&amp;quot;e&amp;quot;:42},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;f&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;Bergamo Std&amp;quot;,&amp;quot;e&amp;quot;:42},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;fc&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;Bold&amp;quot;,&amp;quot;e&amp;quot;:42},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;fid&amp;quot;,&amp;quot;v&amp;quot;:219,&amp;quot;e&amp;quot;:42},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;s&amp;quot;,&amp;quot;v&amp;quot;:37.77777777777778,&amp;quot;e&amp;quot;:42},{&amp;quot;s&amp;quot;:27,&amp;quot;n&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;left&amp;quot;}]}&quot; data-lucid-type=&quot;application/vnd.lucid.text&quot;&gt;&lt;font face=&quot;Times New Roman&quot; style=&quot;font-size: 12px;&quot;&gt;&lt;span style=&quot;font-weight: bold; color: rgb(14, 10, 10);&quot;&gt;&lt;br&gt;Maximize Sequential Access&lt;br&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: bold; color: rgb(14, 10, 10);&quot;&gt;OS is the enemy&lt;br&gt;&lt;br&gt;&amp;lt;1&amp;gt; How DBMS represents the db in files on disk&lt;br&gt;&amp;lt;2&amp;gt; How DBMS manages its memory and moves data back-and-forth from disk&lt;br&gt;&lt;/span&gt;&lt;/font&gt;&lt;/span&gt;" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#99CCFF;" parent="11" vertex="1">
                    <mxGeometry width="477" height="147.77868852459014" as="geometry"/>
                </mxCell>
                <mxCell id="5" value="&lt;span style=&quot;caret-color: rgb(0, 0, 0); font-weight: 400; text-align: start;&quot; data-lucid-content=&quot;{&amp;quot;t&amp;quot;:&amp;quot;Disk Manager - DATABASE STORAGE&amp;quot;,&amp;quot;m&amp;quot;:[{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;left&amp;quot;},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;b&amp;quot;,&amp;quot;v&amp;quot;:true,&amp;quot;e&amp;quot;:31},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;c&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;#0e0a0aff&amp;quot;,&amp;quot;e&amp;quot;:31},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;fc&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;Bold&amp;quot;,&amp;quot;e&amp;quot;:31},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;fid&amp;quot;,&amp;quot;v&amp;quot;:5,&amp;quot;e&amp;quot;:31},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;s&amp;quot;,&amp;quot;v&amp;quot;:44.444444444444436,&amp;quot;e&amp;quot;:31}]}&quot; data-lucid-type=&quot;application/vnd.lucid.text&quot;&gt;&lt;span style=&quot;font-weight: bold; color: rgb(14, 10, 10);&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;Disk Manager - DATABASE STORAGE&lt;/font&gt;&lt;/span&gt;&lt;/span&gt;" style="swimlane;whiteSpace=wrap;html=1;fillColor=#99CCFF;shadow=0;" parent="11" vertex="1">
                    <mxGeometry width="477" height="147.77868852459014" as="geometry">
                        <mxRectangle width="251" height="26" as="alternateBounds"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="14" value="How Represents&#10;(1) page-oriented storage scheme for organizing tuples across heap files (tuple-oriented)&#10;(2) log-structured: write faster, read slower; compaction, Write-Amplification. log on disk&#10;(3) index-organized&#10;Workload: OLTP (row store, N-ARY) &amp; OLAP (column store, DECOMPOSITION-SM) &amp; PAX (Partition Attributes Across)" style="shape=module;align=left;spacingLeft=20;align=center;verticalAlign=top;fontFamily=Times New Roman;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
                    <mxGeometry x="702" y="923" width="606" height="83" as="geometry"/>
                </mxCell>
                <mxCell id="15" value="How Manages&#10;Buffer Pool Manager" style="shape=module;align=left;spacingLeft=20;align=center;verticalAlign=top;fontFamily=Times New Roman;fillColor=#dae8fc;strokeColor=#6c8ebf;" parent="1" vertex="1">
                    <mxGeometry x="702.5" y="1006" width="200.5" height="46" as="geometry"/>
                </mxCell>
                <mxCell id="20" value="" style="group" parent="1" vertex="1" connectable="0">
                    <mxGeometry x="238" y="774" width="475" height="123" as="geometry"/>
                </mxCell>
                <mxCell id="16" value="&#10;&#10;Multiple Buffer Pools (with any page 1 on 1)&#10;Pre-Fetching (from disk pages)&#10;Scan-Sharing (cursor attaching) VS. Buffer Pool Bypass&#10;Replacement Policy e.g. LRU-K&#10;&#10;Internal queue: compute priorities" style="group;fillColor=#ffff88;strokeColor=#36393d;shadow=0;container=0;fontFamily=Times New Roman;" parent="20" vertex="1" connectable="0">
                    <mxGeometry width="475" height="123" as="geometry"/>
                </mxCell>
                <mxCell id="18" value="&lt;span style=&quot;color: rgb(14, 10, 10); text-align: start; caret-color: rgb(0, 0, 0);&quot;&gt;Buffer Pool Manager - CACHE&lt;/span&gt;" style="swimlane;whiteSpace=wrap;html=1;fillColor=#ffff88;shadow=0;strokeColor=#36393d;" parent="20" vertex="1">
                    <mxGeometry width="475" height="123" as="geometry">
                        <mxRectangle width="251" height="26" as="alternateBounds"/>
                    </mxGeometry>
                </mxCell>
                <mxCell id="22" value="" style="group;fillColor=#ffe6cc;strokeColor=#d79b00;" parent="1" vertex="1" connectable="0">
                    <mxGeometry x="253" y="627" width="440" height="116" as="geometry"/>
                </mxCell>
                <mxCell id="23" value="Hash Table&#10;How to map. fast vs. collision rate&#10;How to handle key collisions. a large table vs. additional instructions&#10;&#10;B+ Tree Self-balanced, sorted, &amp; O(log n) &#10;&quot;Modern B-Tree Techniques&quot; node size, merge threshold, variable-length keys, intra-node search" style="group;fillColor=#ffe6cc;strokeColor=#d79b00;shadow=0;container=0;fontFamily=Times New Roman;" parent="22" vertex="1" connectable="0">
                    <mxGeometry y="21.09090909090909" width="440" height="94.9090909090909" as="geometry"/>
                </mxCell>
                <mxCell id="24" value="&lt;span style=&quot;color: rgb(14, 10, 10); text-align: start; caret-color: rgb(0, 0, 0);&quot;&gt;Access Methods&lt;/span&gt;" style="swimlane;whiteSpace=wrap;html=1;fillColor=#ffe6cc;shadow=0;strokeColor=#d79b00;" parent="22" vertex="1">
                    <mxGeometry width="440" height="115.99999999999999" as="geometry">
                        <mxRectangle width="251" height="26" as="alternateBounds"/>
                    </mxGeometry>
                </mxCell>
                <UserObject label="BPlusTree.html" link="https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html" id="27">
                    <mxCell style="fontColor=#0000EE;fontStyle=4;rounded=1;overflow=hidden;spacing=10;fontSize=8;" parent="24" vertex="1">
                        <mxGeometry x="328" y="82" width="68" height="14" as="geometry"/>
                    </mxCell>
                </UserObject>
                <mxCell id="26" value="B+ only stores values in leaf nodes (inner nodes only guide search)&lt;br&gt;Ensure unique ID- &amp;lt;Key, RecordID: (Page, Slot)&amp;gt; | overflow leaf nodes&lt;br&gt;Clustered indexes (in case repeated unnecessary page acess) to maintain an order&lt;br&gt;Optimization: 1. PrefixCompression, &lt;br&gt;2. Deduplication (for multiple copies one same key) with meta,&lt;br&gt;3. SuffixTruncation (min prefix), &lt;br&gt;4. PointerSwizzling (less page table lookups, pin those point to the pinned) &lt;br&gt;5. pre-sort 6. write-optim (log buffers) aka. B-epsilon" style="shape=module;align=left;spacingLeft=20;align=center;verticalAlign=top;fontFamily=Times New Roman;fillColor=#ffe6cc;strokeColor=#d79b00;html=1;" parent="1" vertex="1">
                    <mxGeometry x="681" y="654" width="416" height="135" as="geometry"/>
                </mxCell>
                <mxCell id="31" value="" style="group" parent="1" vertex="1" connectable="0">
                    <mxGeometry x="254" y="331" width="446" height="275" as="geometry"/>
                </mxCell>
                <mxCell id="29" value="&lt;font face=&quot;Times New Roman&quot;&gt;&lt;br&gt;SORT:&lt;br&gt;1) ORDER BY LIMIT: top-N heap sort&lt;br&gt;2) Table &amp;gt;&amp;gt; memory: external merge sort (divide-conquer), e.g. 2-way&lt;br&gt;Comparsion Optimization&lt;br&gt;&lt;br&gt;AGGREGATIONS:&lt;br&gt;a. skip over the duplication up ahead in the operator tree&lt;br&gt;b. external hashing aggregation: Phase 1 - Partition (duplication together) &amp;amp; Phase 2 - ReHash (from ph1 buckets) eliminate dups&lt;br&gt;&lt;br&gt;&lt;/font&gt;&lt;span style=&quot;font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;JOIN: (reconstruct the tuples without any information loss)&lt;br&gt;&lt;/span&gt;&lt;font face=&quot;Times New Roman&quot;&gt;(1) Nested Loop Join (1.1) Naive. M+(m·N) (1.2) Block&amp;nbsp;&lt;/font&gt;&lt;span style=&quot;font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;M+(M·N) (1.3) Index&amp;nbsp;&lt;/span&gt;&lt;span style=&quot;font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;M+(m·C)&lt;br&gt;&lt;/span&gt;&lt;font face=&quot;Times New Roman&quot;&gt;SMALLER as outer table (buffer amap), loop over the inner table&lt;br&gt;(2) Sort-Merge Join: sort first, then `loop`&lt;br&gt;(3) Hash Join:(materialization early_vs_late/&lt;/font&gt;&lt;span style=&quot;font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;row_&lt;/span&gt;&lt;font face=&quot;Times New Roman&quot;&gt;vs_c&lt;/font&gt;&lt;span style=&quot;font-family: &amp;quot;Times New Roman&amp;quot;;&quot;&gt;olumn&lt;/span&gt;&lt;font face=&quot;Times New Roman&quot;&gt;) Build+Probe `gather cluster?`&lt;br&gt;(3.2) Partitioned (GRACE) Hash Join (spill the&amp;nbsp; buckets) cost=2(M+N)+(M+N )&lt;br&gt;&lt;/font&gt;" style="rounded=0;whiteSpace=wrap;html=1;glass=0;sketch=0;fillColor=#f8cecc;strokeColor=#b85450;" parent="31" vertex="1">
                    <mxGeometry width="446" height="275" as="geometry"/>
                </mxCell>
                <mxCell id="7" value="&lt;span style=&quot;caret-color: rgb(0, 0, 0); font-weight: 400; text-align: start;&quot; data-lucid-content=&quot;{&amp;quot;t&amp;quot;:&amp;quot;Operator Execution&amp;quot;,&amp;quot;m&amp;quot;:[{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;a&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;left&amp;quot;},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;fc&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;Bold&amp;quot;,&amp;quot;e&amp;quot;:18},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;fid&amp;quot;,&amp;quot;v&amp;quot;:5,&amp;quot;e&amp;quot;:18},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;b&amp;quot;,&amp;quot;v&amp;quot;:true,&amp;quot;e&amp;quot;:18},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;s&amp;quot;,&amp;quot;v&amp;quot;:40,&amp;quot;e&amp;quot;:18},{&amp;quot;s&amp;quot;:0,&amp;quot;n&amp;quot;:&amp;quot;c&amp;quot;,&amp;quot;v&amp;quot;:&amp;quot;#0e0a0aff&amp;quot;,&amp;quot;e&amp;quot;:18}]}&quot; data-lucid-type=&quot;application/vnd.lucid.text&quot;&gt;&lt;span style=&quot;font-weight: bold; color: rgb(14, 10, 10);&quot;&gt;&lt;font style=&quot;font-size: 12px;&quot;&gt;Operator Execution&lt;/font&gt;&lt;/span&gt;&lt;/span&gt;" style="swimlane;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;rounded=0;glass=0;" parent="31" vertex="1">
                    <mxGeometry width="444.9954954954955" height="275" as="geometry"/>
                </mxCell>
                <mxCell id="34" value="" style="group" parent="1" vertex="1" connectable="0">
                    <mxGeometry x="254" y="131" width="446" height="190" as="geometry"/>
                </mxCell>
                <mxCell id="35" value="&lt;p style=&quot;line-height: 100%;&quot;&gt;&lt;font face=&quot;Times New Roman&quot;&gt;&lt;br&gt;&lt;br&gt;Planning &amp;amp; Optimization (80s-90s papers)&lt;br&gt;A plan based on Catalog, optimizer, e.g. &lt;br&gt;cartesian product &lt;b&gt;to&lt;/b&gt; join &lt;b&gt;to&lt;/b&gt; sort-merge (materialization) &lt;b&gt;to &lt;/b&gt;piplining &lt;b&gt;to &lt;/b&gt;reshaped-tree (idx)&lt;br&gt;Search space large, QO is NP-hard. Choose from a subset&lt;br&gt;Predict (rewrite predicate pushdown/replace catesian/projection pushdown), Estimates costs&lt;br&gt;&lt;br&gt;Cost-based Bottom-up QO e.g. Pick best access method. dp: Prune at the beginning&lt;br&gt;enumeration.Top-down QO diff?&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 100%;&quot;&gt;&lt;font face=&quot;Times New Roman&quot;&gt;Nested Sub-Queries. rewrite, decompose, flatten (correlated queries), expression rewriting&lt;br&gt;&lt;/font&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 100%;&quot;&gt;&lt;font face=&quot;Times New Roman&quot;&gt;Cost Model: Physical. CPU cycles, IO, cache misses, RAM... &amp;amp; Logical...&lt;/font&gt;&lt;/p&gt;" style="rounded=0;whiteSpace=wrap;html=1;glass=0;sketch=0;fillColor=#f8cecc;strokeColor=#b85450;" parent="34" vertex="1">
                    <mxGeometry width="446" height="190" as="geometry"/>
                </mxCell>
                <mxCell id="36" value="&lt;span style=&quot;color: rgb(14, 10, 10); text-align: start; caret-color: rgb(0, 0, 0);&quot;&gt;Query Planning (in a tree)&lt;/span&gt;" style="swimlane;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;rounded=0;glass=0;" parent="34" vertex="1">
                    <mxGeometry width="444.9954954954955" height="190" as="geometry"/>
                </mxCell>
                <mxCell id="37" value="Hash: Linear Probe Scanning, + Cuckoo (less rehashing)&lt;br&gt;Dynamic Hashing: Chained (bucket pointers), Extendible (in terms of bits), Linear Hashing" style="shape=module;align=left;spacingLeft=20;align=center;verticalAlign=top;fontFamily=Times New Roman;fillColor=#ffe6cc;strokeColor=#d79b00;html=1;" parent="1" vertex="1">
                    <mxGeometry x="680" y="605" width="518" height="45" as="geometry"/>
                </mxCell>
                <mxCell id="25" value="&lt;p style=&quot;line-height: 110%;&quot;&gt;&lt;b&gt;Execute Queries&lt;/b&gt;&lt;br&gt;&lt;b&gt;Processing Model (composing operators into a plan)&lt;/b&gt;&lt;br&gt;# 1: Iterator Model (Tuple Pipelining Next(), Open(), and Close())&lt;br&gt;&lt;span style=&quot;&quot;&gt;&#9;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&#9;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&#9;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&#9;&lt;/span&gt;&lt;span style=&quot;&quot;&gt;&#9;&lt;/span&gt;Joins, Aggregates, Subqueries, Order By,... block until their children emit all their tuples&lt;br&gt;# 2: Materialization Model (return all tuples) OLTP oriented, whose queries access a small number of tuples at a time.&lt;br&gt;Lower execution overhead. Fewer function calls.&lt;br&gt;# 3: Vectorized / Batch Model (return a batch of records) : flexible&lt;br&gt;I&lt;u&gt;terator - Batch (SIMD) - Materialization&lt;/u&gt;&lt;br&gt;&lt;br&gt;&lt;b&gt;Plan Processing Direction&lt;/b&gt;: Top-to-Bottom, Bottom-to-Top&lt;br&gt;&lt;br&gt;A&lt;b&gt;ccess Methods: &lt;/b&gt;&lt;br&gt;Sequential Scan (cursor tracks the last page/slot), &lt;br&gt;*Data Skipping: Lossy Approximate Query &amp;amp; Lossless Zone Maps(pre-comupted aggrergates in a page, whether to access to that page)&lt;br&gt;Index Scan (), Multi-Index Scan (set intersection, &amp;lt;depends on correlateion&amp;gt;)&lt;br&gt;&lt;br&gt;&lt;b&gt;MODIFICATION QUERIES:&lt;/b&gt;&lt;br&gt;&lt;u&gt;UPDATE/DELETE: Halloween(fetching again), Solution: track modified record ids per query.&lt;/u&gt;&lt;br&gt;INSERT: 1) materialize tuples inside operator 2) operator inserts any tuples passed in from child operators&lt;br&gt;&lt;br&gt;&lt;b&gt;Expression Evaluation:&lt;/b&gt; WHERE clause as an expression tree, JIT compilation speed expression trees up?&lt;br&gt;&lt;br&gt;&lt;b&gt;Scheduler, Monitor&lt;/b&gt;: (more than data flow)Control Flow elastic and flexible&lt;br&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 110%;&quot;&gt;&lt;b&gt;Process Model, support concurrent requests / queries&lt;/b&gt;&lt;br&gt;1. Process per worker Relies on OS dispatcher. Uses share-memory for global data structures&lt;br&gt;&lt;span style=&quot;background-color: initial;&quot;&gt;2. Thread per worker DBMS own scheduling. Crash killer&lt;br&gt;3. Embedded DBMS: run in the same workspace (address space) as the application&lt;/span&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 110%;&quot;&gt;&lt;b&gt;Inter-Query (multiple queries) &amp;amp; Intra-Query (organization of operators in terms of a Prod-Cons paradigm)&lt;/b&gt;&lt;br&gt;Intra-Query: 1) intra-operator fragments. Exchange Operator (Gather, Distribute, &amp;amp; Repartition)&lt;br&gt;2) inter-operator. pipeline (emit one by one) 3) bushy. hybrid of the former two&lt;/p&gt;&lt;p style=&quot;line-height: 110%;&quot;&gt;&lt;b&gt;IO Parallelism / PARTITIONING&lt;/b&gt;&lt;/p&gt;&lt;p style=&quot;line-height: 110%;&quot;&gt;&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;/p&gt;" style="shape=module;align=left;spacingLeft=20;align=center;verticalAlign=top;fontFamily=Times New Roman;fillColor=#f8cecc;strokeColor=#b85450;html=1;" parent="1" vertex="1">
                    <mxGeometry x="687" y="133" width="670" height="465" as="geometry"/>
                </mxCell>
                <mxCell id="38" value="" style="shape=curlyBracket;whiteSpace=wrap;html=1;rounded=1;flipH=1;labelPosition=right;verticalLabelPosition=middle;align=left;verticalAlign=middle;fontSize=12;size=0.2931232452392538;rotation=-180;fillColor=#e1d5e7;strokeColor=#CD9DE3;strokeWidth=3;" vertex="1" parent="1">
                    <mxGeometry x="177" y="333" width="64" height="565" as="geometry"/>
                </mxCell>
                <mxCell id="49" value="" style="shape=curlyBracket;whiteSpace=wrap;html=1;rounded=1;flipH=1;labelPosition=right;verticalLabelPosition=middle;align=left;verticalAlign=middle;fontSize=12;size=0.25761188160289406;rotation=-180;fillColor=#e1d5e7;strokeColor=#FF9933;strokeWidth=3;" vertex="1" parent="1">
                    <mxGeometry x="187" y="776" width="64" height="283" as="geometry"/>
                </mxCell>
                <mxCell id="50" value="&lt;pre style=&quot;line-height: 50%;&quot;&gt;&lt;span style=&quot;font-size: 15px;&quot;&gt;Recovery &lt;/span&gt;&lt;/pre&gt;" style="html=1;whiteSpace=wrap;container=1;recursiveResize=0;collapsible=0;strokeColor=#FF9933;strokeWidth=3;fontSize=12;align=right;" vertex="1" parent="1">
                    <mxGeometry x="67" y="903" width="120" height="43.5" as="geometry"/>
                </mxCell>
                <mxCell id="51" value="" style="triangle;html=1;whiteSpace=wrap;strokeColor=#FF9933;strokeWidth=3;fontSize=12;" vertex="1" parent="50">
                    <mxGeometry x="9" y="7" width="20" height="30" as="geometry"/>
                </mxCell>
            </root>
        </mxGraphModel>
    </diagram>
</mxfile>